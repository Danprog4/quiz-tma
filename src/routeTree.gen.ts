/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as QuizzesImport } from './routes/quizzes'
import { Route as LeadersImport } from './routes/leaders'
import { Route as IndexImport } from './routes/index'
import { Route as QuizIdImport } from './routes/quiz.$id'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const QuizzesRoute = QuizzesImport.update({
  id: '/quizzes',
  path: '/quizzes',
  getParentRoute: () => rootRoute,
} as any)

const LeadersRoute = LeadersImport.update({
  id: '/leaders',
  path: '/leaders',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const QuizIdRoute = QuizIdImport.update({
  id: '/quiz/$id',
  path: '/quiz/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/leaders': {
      id: '/leaders'
      path: '/leaders'
      fullPath: '/leaders'
      preLoaderRoute: typeof LeadersImport
      parentRoute: typeof rootRoute
    }
    '/quizzes': {
      id: '/quizzes'
      path: '/quizzes'
      fullPath: '/quizzes'
      preLoaderRoute: typeof QuizzesImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/quiz/$id': {
      id: '/quiz/$id'
      path: '/quiz/$id'
      fullPath: '/quiz/$id'
      preLoaderRoute: typeof QuizIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leaders': typeof LeadersRoute
  '/quizzes': typeof QuizzesRoute
  '/search': typeof SearchRoute
  '/quiz/$id': typeof QuizIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leaders': typeof LeadersRoute
  '/quizzes': typeof QuizzesRoute
  '/search': typeof SearchRoute
  '/quiz/$id': typeof QuizIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/leaders': typeof LeadersRoute
  '/quizzes': typeof QuizzesRoute
  '/search': typeof SearchRoute
  '/quiz/$id': typeof QuizIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/leaders' | '/quizzes' | '/search' | '/quiz/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/leaders' | '/quizzes' | '/search' | '/quiz/$id'
  id: '__root__' | '/' | '/leaders' | '/quizzes' | '/search' | '/quiz/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LeadersRoute: typeof LeadersRoute
  QuizzesRoute: typeof QuizzesRoute
  SearchRoute: typeof SearchRoute
  QuizIdRoute: typeof QuizIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeadersRoute: LeadersRoute,
  QuizzesRoute: QuizzesRoute,
  SearchRoute: SearchRoute,
  QuizIdRoute: QuizIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/leaders",
        "/quizzes",
        "/search",
        "/quiz/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/leaders": {
      "filePath": "leaders.tsx"
    },
    "/quizzes": {
      "filePath": "quizzes.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/quiz/$id": {
      "filePath": "quiz.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
